package com.inn.products.controllers;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import com.inn.products.dtos.ProductMovementSummaryDTO;
import com.inn.products.services.MovementService;
import com.inn.products.services.ReportService;

@RestController
@RequestMapping("/api/reports")
public class ReportController {

    @Autowired
    private ReportService reporteService;
    
    @Autowired
    private MovementService movementService;

    @GetMapping("/weekly")
    public ResponseEntity<?> generarReporteSemanal(
            @RequestParam("fechaInicio") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fechaInicio,
            @RequestParam("fechaFin") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime fechaFin,
            @RequestParam(value = "warehouseId", defaultValue = "1") Long warehouseId,
            @RequestParam(value = "movementTypeIds", defaultValue = "1,2,3,4") List<Long> movementTypeIds,
            @RequestParam(value = "semana", defaultValue = "1") Integer semana,
            @RequestParam(value = "formato", defaultValue = "PDF") String formato
    ) throws Exception {

        try {
        	if(movementService.fechaNoExcedeSemana(fechaInicio, fechaFin)) {
	            // 1. Obtener los movimientos
	            List<ProductMovementSummaryDTO> movements = movementService.findMovementsGroupedByProductName(fechaInicio, fechaFin, warehouseId, movementTypeIds);
	
	            byte[] reporte;
	            HttpHeaders headers = new HttpHeaders();
	            
	            // 2. Generar el reporte
	            if(formato.equalsIgnoreCase("PDF")) {
		            reporte = reporteService.generarReporteSemanalPDF(movements, fechaInicio, fechaFin, semana);
		            headers.setContentType(MediaType.APPLICATION_PDF);
		            headers.setContentDispositionFormData("attachment", "reporteSemanal.pdf");
		            headers.setContentLength(reporte.length);
	            }else {
		           reporte = reporteService.generarReporteSemanalXLSX(movements, fechaInicio, fechaFin, semana);
	            }
	
	            // 3. Devolver el reporte en la respuesta
	            return new ResponseEntity<>(reporte, headers, HttpStatus.OK);
        	}else {
                return ResponseEntity.badRequest().body("La fecha no debe exceder de una semana");
        	}
        } catch (MethodArgumentTypeMismatchException ex) {
            String parameterName = ex.getParameter().getParameterName();
            String expectedType = ex.getRequiredType().getSimpleName();
            String errorMessage = String.format("El par√°metro '%s' debe ser de tipo '%s'.", parameterName, expectedType);
            return ResponseEntity.badRequest().body(errorMessage.getBytes());

        } catch (Exception ex) {
            // Manejo de otras excepciones (ej. excepciones de la capa de servicio)
            return ResponseEntity.internalServerError().body("Error interno del servidor".getBytes());
        }
    }
}